"""
This file reads binary SysEx data and converts it to a ML-friendly dataset.
It comprises a transpile of selected code from the `learnfm` project:

    https://github.com/bwhitman/learnfm/

and was entirely generated by ChatGPT 4.0, with guiding prompts from the author.

For an outline of the DX7 SysEx patch structure, see this useful note:

    https://homepages.abdn.ac.uk/d.j.benson/pages/dx7/sysex-format.txt
"""

def unpack_patch(bulk):
    def read_byte(offset, mask=0b01111111, shift=0):
        return (bulk[offset] & mask) >> shift
    
    def read_char(offset):
        return chr(bulk[offset])
    
    operators = ["OP6", "OP5", "OP4", "OP3", "OP2", "OP1"]
    parameters = {}
    
    for idx, op in enumerate(operators):
        base_offset = idx * 17
        parameters.update({
            f"{op} EG rate 1": read_byte(base_offset),
            f"{op} EG rate 2": read_byte(base_offset + 1),
            f"{op} EG rate 3": read_byte(base_offset + 2),
            f"{op} EG rate 4": read_byte(base_offset + 3),
            f"{op} EG level 1": read_byte(base_offset + 4),
            f"{op} EG level 2": read_byte(base_offset + 5),
            f"{op} EG level 3": read_byte(base_offset + 6),
            f"{op} EG level 4": read_byte(base_offset + 7),
            f"{op} KBD LEV SCL BRK PT": read_byte(base_offset + 8),
            f"{op} KBD LEV SCL LFT DEPTH": read_byte(base_offset + 9),
            f"{op} KBD LEV SCL RHT DEPTH": read_byte(base_offset + 10),
            f"{op} KBD LEV SCL LFT CURVE": read_byte(base_offset + 11, 0b00000011),
            f"{op} KBD LEV SCL RHT CURVE": read_byte(base_offset + 11, 0b00001100, 2),
            f"{op} OSC DETUNE": read_byte(base_offset + 12, 0b00000111),
            f"{op} KBD RATE SCALING": read_byte(base_offset + 12, 0b00111000, 3),
            f"{op} KEY VEL SENSITIVITY": read_byte(base_offset + 13, 0b00111000, 3),
            f"{op} AMP MOD SENSITIVITY": read_byte(base_offset + 13, 0b00000011),
            f"{op} OPERATOR OUTPUT LEVEL": read_byte(base_offset + 14),
            f"{op} OSC MODE": read_byte(base_offset + 15, 0b00000001),
            f"{op} OSC FREQ COARSE": read_byte(base_offset + 15, 0b01111110, 1),
            f"{op} OSC FREQ FINE": read_byte(base_offset + 16)
        })
    
    parameters.update({
        "PITCH EG rate 1": read_byte(102),
        "PITCH EG rate 2": read_byte(103),
        "PITCH EG rate 3": read_byte(104),
        "PITCH EG rate 4": read_byte(105),
        "PITCH EG level 1": read_byte(106),
        "PITCH EG level 2": read_byte(107),
        "PITCH EG level 3": read_byte(108),
        "PITCH EG level 4": read_byte(109),
        "ALGORITHM #": read_byte(110, 0b00111111),
        "OSCILLATOR SYNC": read_byte(111, 0b00000100, 2),
        "FEEDBACK": read_byte(111, 0b00000011),
        "LFO SPEED": read_byte(112),
        "LFO DELAY": read_byte(113),
        "LFO PITCH MOD DEPTH": read_byte(114),
        "LFO AMP MOD DEPTH": read_byte(115),
        "LFO SYNC": read_byte(116, 0b00000001),
        "LFO WAVEFORM": read_byte(116, 0b00111000, 3),
        "PITCH MOD SENSITIVITY": read_byte(116, 0b01110000, 4),
        "TRANSPOSE": read_byte(117),
        "VOICE NAME": ''.join([read_char(i) for i in range(118, 128)])
    })
    return parameters


def generate_dataset(fpath):
    # Reading the binary data
    with open(fpath, 'rb') as f:
        data = f.read()

    # Generating the dataset
    patches = [data[i:i+128] for i in range(0, len(data), 128)]
    dataset = [unpack_patch(patch) for patch in patches]

    return dataset
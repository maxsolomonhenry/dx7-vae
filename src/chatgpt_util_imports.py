"""
This file reads binary SysEx data and converts it to a human-readble dict array.
It comprises a transpile of selected code from the `learnfm` project:

    https://github.com/bwhitman/learnfm/

and was entirely generated by ChatGPT 4.0, with guiding prompts from the author.
"""

def unpack_patch(bulk):
    patch = bytearray(156)
    for op in range(6):
        patch[op * 21: op * 21 + 11] = bulk[op * 17: op * 17 + 11]
        leftrightcurves = bulk[op * 17 + 11]
        patch[op * 21 + 11] = leftrightcurves & 3
        patch[op * 21 + 12] = (leftrightcurves >> 2) & 3
        detune_rs = bulk[op * 17 + 12]
        patch[op * 21 + 13] = detune_rs & 7
        patch[op * 21 + 20] = detune_rs >> 3
        kvs_ams = bulk[op * 17 + 13]
        patch[op * 21 + 14] = kvs_ams & 3
        patch[op * 21 + 15] = kvs_ams >> 2
        patch[op * 21 + 16] = bulk[op * 17 + 14]
        fcoarse_mode = bulk[op * 17 + 15]
        patch[op * 21 + 17] = fcoarse_mode & 1
        patch[op * 21 + 18] = fcoarse_mode >> 1
        patch[op * 21 + 19] = bulk[op * 17 + 16]
    
    patch[126: 126 + 9] = bulk[102: 102 + 9]
    oks_fb = bulk[111]
    patch[135] = oks_fb & 7
    patch[136] = oks_fb >> 3
    patch[137: 137 + 4] = bulk[112: 112 + 4]
    lpms_lfw_lks = bulk[116]
    patch[141] = lpms_lfw_lks & 1
    patch[142] = (lpms_lfw_lks >> 1) & 7
    patch[143] = lpms_lfw_lks >> 4
    patch[144: 144 + 11] = bulk[117: 117 + 11]
    patch[155] = 0x3f

    return patch


def parse_patch_to_dict(patch):
    patch_dict = {
        'name': patch[144:155].decode('ascii', errors='replace').strip(),
        'algorithm': patch[135],
        'feedback': patch[136],
        'operators': []
    }
    
    for op in range(6):
        operator_data = {
            'eg_rate_level': list(patch[op * 21: op * 21 + 11]),
            'left_curve': patch[op * 21 + 11],
            'right_curve': patch[op * 21 + 12],
            'detune': patch[op * 21 + 13],
            'rate_scaling': patch[op * 21 + 20],
            'kvs': patch[op * 21 + 14],
            'ams': patch[op * 21 + 15],
            'output_level': patch[op * 21 + 16],
            'frequency_mode': patch[op * 21 + 17],
            'frequency_coarse': patch[op * 21 + 18],
            'frequency_fine': patch[op * 21 + 19],
        }
        patch_dict['operators'].append(operator_data)
    
    return patch_dict


def generate_dataset(fpath):
    with open(fpath, 'rb') as f:
        data = f.read()
        
    num_patches = len(data) // 128
    dataset = []
    
    for i in range(num_patches):
        bulk_patch = data[i*128: (i+1)*128]
        unpacked_patch = unpack_patch(bulk_patch)
        patch_dict = parse_patch_to_dict(unpacked_patch)
        dataset.append(patch_dict)
    
    return dataset
